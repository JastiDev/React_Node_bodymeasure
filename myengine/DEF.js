export class Pixel{
    constructor(r=0, g=0, b=0){
        this.R = r;
        this.G = g;
        this.B = b;
    }

    oprPlus(other){
        return Pixel(this.R + other.R, this.G + other.G, this.B + other.B);
    }

    oprMinus(other){
        return Pixel(this.R - other.R, this.G - other.G, this.B - other.B);
    }

    oprMultiply(Rate){
        return Pixel(Math.round(this.R*Rate), Math.round(this.G*Rate), Math.round(this.B*Rate));
    }

    oprDivide(Rate){
        return Pixel(this.R/Rate, this.G/Rate, this.B/Rate);
    }
};

export class Point_2D{
    constructor(x=0, y=0){
        this.x = x;
        this.y = y;
    }

    oprPlus(other){
        return new Point_2D(this.x + other.x, this.y + other.y);
    }

    oprMinus(other){
        return new Point_2D(this.x - other.x, this.y - other.y);
    }

    oprMultiply(Rate){
        return new Point_2D(Math.round(this.x*Rate), Math.round(this.y*Rate));
    }

    oprDivide(Rate){
        return new Point_2D(this.x/Rate, this.y/Rate);
    }
};

export const MAX_POLYGON_EDGES = 60;

export class Point_List{
    constructor(){
        this.Point_Count = 0;
        this.Points = [];
        for(let i=0; i<MAX_POLYGON_EDGES; i++) this.Points.push(new Point_2D());
    }
}

export class Polygon_2D extends Point_List{

    constructor(){
        super();
        this.Point_Count = 0;
        this.Points = [];
        this.Quality = []; //MAX_POLYGON_EDGES
        for(let i=0; i<MAX_POLYGON_EDGES; i++) this.Points.push(new Point_2D());
        for(let i=0; i<MAX_POLYGON_EDGES; i++) this.Quality.push(0);
    }

    insert(pnt){
        this.Points[++this.Point_Count] = pnt;
    }

    insert(x, y){
        this.Points[++this.Point_Count] = new Point_2D(x, y);
    }
}


export const BODY_IMAGE_WIDTH = 384;
export const BODY_IMAGE_HEIGHT = 512;

export class Body_Image{
    constructor(){
        this.Pixel = [];
        for(let i=0; i<BODY_IMAGE_HEIGHT; i++){
            let arr = [];
            for(let j=0; j<BODY_IMAGE_WIDTH; j++){
                arr.push(new Pixel());
            }
            this.Pixel.push(arr);
        }
    }
};


export class Body_Params{
    constructor(){
        // Input
        this.Age = 0;					// 0
        this.Is_Male = 0;				// 1
        this.Height = 0;				// 2
        this.Weight = 0;				// 3

        // Result
        this.Neck_Round_Length = 0;		// 4    //
        this.Chest_Round_Length = 0;	// 5    //
        this.Wrist_Round_Length = 0;	// 6    //
        this.Hip_Round_Length = 0;		// 7    //
        this.Arm_Length = 0;			// 8    //
        this.Waist_Round_Length = 0;	// 9    //
        this.Arm_Round_Length = 0;		// 10   //
        this.Back_Length = 0;		    // 11   //
        this.Should_Width = 0;		    // 12   //
        this.forearm_Round_Length = 0; // 30   //
        this.thigh_Round_Length = 0; // 31   //
        this.calf_Round_Length = 0; // 32   //

        // Other
        this.Fat_Per = 0;				// 13

        // Information
        this.Left_Should_Type = 0;       //14
        this.Right_Should_Type = 0;      //15
        this.Hip_Type = 0;               //16
        this.Belly_Type = 0;             //17
        this.Back_Type = 0;              //18

        //Front
        this.Left_Shoulder_Angle = 0;	//19
        this.Right_Shoulder_Angle = 0;	//20

        //Side
        this.Belly_Height_Rate = 0;		//21
        this.Hip_Height_Rate = 0;		//22
        this.Chest_Angle = 0;			//23
        this.Back_Angle = 0;			//24

        //nearby type
        this.LST = 0;					//25
        this.RST = 0;					//26
        this.Hip = 0;					//27
        this.Belly = 0;					//28
        this.Back = 0;					//29
    }
}

export function Get_Pixel(img, x, y) {return img.Pixel[(y)][(x)]}
export function Set_Pixel(img, x, y, v) {img.Pixel[y][x] = (v)}

export const gcos=[32768,32763,32748,32723,32688,32643,32588,32523,32449,32364,32270,32165,32051,31928,31794,31651,31498,31336,31164,30982,30791,30591,30381,30163,29935,29697,29451,29196,28932,28659,28377,28087,27788,27481,27165,26841,26509,26169,25821,25465,25101,24730,24351,23964,23571,23170,22762,22347,21926,21497,21062,20621,20173,19720,19260,18794,18323,17846,17364,16876,16384,15886,15383,14876,14364,13848,13327,12803,12275,11743,11207,10668,10125,9580,9032,8480,7927,7371,6812,6252,5690,5126,4560,3993,3425,2855,2285,1714,1143,571,0,-571,-1143,-1714,-2285,-2855,-3425,-3993,-4560,-5126,-5690,-6252,-6812,-7371,-7927,-8480,-9032,-9580,-10125,-10668,-11207,-11743,-12275,-12803,-13327,-13848,-14364,-14876,-15383,-15886,-16383,-16876,-17364,-17846,-18323,-18794,-19260,-19720,-20173,-20621,-21062,-21497,-21926,-22347,-22762,-23170,-23571,-23964,-24351,-24730,-25101,-25465,-25821,-26169,-26509,-26841,-27165,-27481,-27788,-28087,-28377,-28659,-28932,-29196,-29451,-29697,-29935,-30163,-30381,-30591,-30791,-30982,-31164,-31336,-31498,-31651,-31794,-31928,-32051,-32165,-32270,-32364,-32449,-32523,-32588,-32643,-32688,-32723,-32748,-32763,-32768,-32763,-32748,-32723,-32688,-32643,-32588,-32523,-32449,-32364,-32270,-32165,-32051,-31928,-31794,-31651,-31498,-31336,-31164,-30982,-30791,-30591,-30381,-30163,-29935,-29697,-29451,-29196,-28932,-28659,-28377,-28087,-27788,-27481,-27165,-26841,-26509,-26169,-25821,-25465,-25101,-24730,-24351,-23964,-23571,-23170,-22762,-22347,-21926,-21497,-21062,-20621,-20173,-19720,-19260,-18794,-18323,-17846,-17364,-16876,-16384,-15886,-15383,-14876,-14364,-13848,-13327,-12803,-12275,-11743,-11207,-10668,-10125,-9580,-9032,-8480,-7927,-7371,-6812,-6252,-5690,-5126,-4560,-3993,-3425,-2855,-2285,-1714,-1143,-571,0,571,1143,1714,2285,2855,3425,3993,4560,5126,5690,6252,6812,7371,7927,8480,9032,9580,10125,10668,11207,11743,12275,12803,13327,13848,14364,14876,15383,15886,16384,16876,17364,17846,18323,18794,19260,19720,20173,20621,21062,21497,21926,22347,22762,23170,23571,23964,24351,24730,25101,25465,25821,26169,26509,26841,27165,27481,27788,28087,28377,28659,28932,29196,29451,29697,29935,30163,30381,30591,30791,30982,31164,31336,31498,31651,31794,31928,32051,32165,32270,32364,32449,32523,32588,32643,32688,32723,32748,32763];
export const gsin=[0,571,1143,1714,2285,2855,3425,3993,4560,5126,5690,6252,6812,7371,7927,8480,9032,9580,10125,10668,11207,11743,12275,12803,13327,13848,14364,14876,15383,15886,16383,16876,17364,17846,18323,18794,19260,19720,20173,20621,21062,21497,21926,22347,22762,23170,23571,23964,24351,24730,25101,25465,25821,26169,26509,26841,27165,27481,27788,28087,28377,28659,28932,29196,29451,29697,29935,30163,30381,30591,30791,30982,31164,31336,31498,31651,31794,31928,32051,32165,32270,32364,32449,32523,32588,32643,32688,32723,32748,32763,32768,32763,32748,32723,32688,32643,32588,32523,32449,32364,32270,32165,32051,31928,31794,31651,31498,31336,31164,30982,30791,30591,30381,30163,29935,29697,29451,29196,28932,28659,28377,28087,27788,27481,27165,26841,26509,26169,25821,25465,25101,24730,24351,23964,23571,23170,22762,22347,21926,21497,21062,20621,20173,19720,19260,18794,18323,17846,17364,16876,16383,15886,15383,14876,14364,13848,13327,12803,12275,11743,11207,10668,10125,9580,9032,8480,7927,7371,6812,6252,5690,5126,4560,3993,3425,2855,2285,1714,1143,571,0,-571,-1143,-1714,-2285,-2855,-3425,-3993,-4560,-5126,-5690,-6252,-6812,-7371,-7927,-8480,-9032,-9580,-10125,-10668,-11207,-11743,-12275,-12803,-13327,-13848,-14364,-14876,-15383,-15886,-16383,-16876,-17364,-17846,-18323,-18794,-19260,-19720,-20173,-20621,-21062,-21497,-21926,-22347,-22762,-23170,-23571,-23964,-24351,-24730,-25101,-25465,-25821,-26169,-26509,-26841,-27165,-27481,-27788,-28087,-28377,-28659,-28932,-29196,-29451,-29697,-29935,-30163,-30381,-30591,-30791,-30982,-31164,-31336,-31498,-31651,-31794,-31928,-32051,-32165,-32270,-32364,-32449,-32523,-32588,-32643,-32688,-32723,-32748,-32763,-32768,-32763,-32748,-32723,-32688,-32643,-32588,-32523,-32449,-32364,-32270,-32165,-32051,-31928,-31794,-31651,-31498,-31336,-31164,-30982,-30791,-30591,-30381,-30163,-29935,-29697,-29451,-29196,-28932,-28659,-28377,-28087,-27788,-27481,-27165,-26841,-26509,-26169,-25821,-25465,-25101,-24730,-24351,-23964,-23571,-23170,-22762,-22347,-21926,-21497,-21062,-20621,-20173,-19720,-19260,-18794,-18323,-17846,-17364,-16876,-16384,-15886,-15383,-14876,-14364,-13848,-13327,-12803,-12275,-11743,-11207,-10668,-10125,-9580,-9032,-8480,-7927,-7371,-6812,-6252,-5690,-5126,-4560,-3993,-3425,-2855,-2285,-1714,-1143,-571];
